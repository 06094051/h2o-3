
Has-a vs Is-a Job

Job is now a final class; all classes which used to inherit from Job now
instead have a "Job _job;" field.  Job now has a much simpler structure; there
are final fields (result key, seperate from the Job key itself, the result
type, and a description field), and mutable fields.  All mutable fields make a
one-shot change from 0 to non-zero and never change again, thus ending many
races with Job state.  Jobs have a start and end time, a possible exception, a
flag indicating the Job should stop as soon as possible, and fields tracking
progress.  Installing an exception now runs the nested FJTask's onExComp to
completion, before the Job itself completes.  Jobs self-remove on completion.
The public API is now fairly minimal and javadoc'd.

Job now has a new State: CANCEL_PENDING, as this operation was never
instantaneous.  Job's CREATED state is never user-visible.

Most constructors that used to pass Job args up to the super, now instead
assign the Job field somewhere in an exec() call - so the args moved from the
constructor to the exec() call.

ModelBuilder is the class heiarchy most affected by this change.

ModelBuilders and Model.Parameters now support a full range of string-to-flavor
converters (gbm -> Gradient Boosting Machine, or gbm -> hex.tree.gbm.GBM, and
several other flavors).  The REST changes make extensive use of these calls.


-----
Master-Bug Fixes:

Aborted Atomic XTNs now block until the Value that triggered the abort is
universally visible.  Previously a XTN could happen on the master, changing the
Value - and a 2nd XTN coming from some node with a cached older copy could see
his XTN abort (because master had updated), but then also see the cached older
copy with the master update.  Seen as a rare race bug with ESPC updates, and
probably occasionally with RollupStats.  Shows up in a subtle change in Value
isReleasable (aborted XTN can be blocked awaiting a first XTN to complete, when
the 1st XTN itself is upgraded).

ESPC updates have many more comments, and a few rare-path cutouts.

Lockable needs casts for java8 javac

Remove some instances of wrapping an exception in an exception, allowing the
original exception to be visible in e.g. logs.  Many catch-clauses that simply
rethrew (without any logging or recovery) got removed.  Also catch/log/die now
simply do not catch (and a higher level handler will catch/log/die).  Vastly
better debuggability.

-----
REST layer changes:

Most Schemas of Job types (including all the ModelBuilders but also e.g. 
CreateFrame) no longer extend JobV3, but instead contain a JobV3 field.  Most
run/exec/handle calls now return a JobV3 schema instead of their self-type.

There is one shared handler for all ModelBuilders and for all flavors of
GridSearch.  GridSearch no longer has or needs a HandlerFactory.

Most newInstance calls are now made through the TypeMap interface (which is
much faster (no reflection) and much simpler (no exceptions)).

KeyV3 subtypes are made in the corresponding classes via v-call

Special ParseExceptions had all their specialness killed during ser/deser, and
didn't actually use the special fields, so got removed.

lowercase global static "latest_version" got upper-cased

Markdown calls dead argument "appendToMe" removed

Removed files: 

  H2OParseSetupException, H2OParseException, H2OInternalParseException,
  KeyedVoid, HandlerFactory, ModelFactory

Renamed:
  ModelBuilderJobV3 -> ModelBuilderV3
  h2o-algos/.../hex/api/GridSearchHandler -> h2o-core/.../water/api/GridSearchHandler
  h2o-algos/.../hex/schemas/GridSearchSchema -> h2o-core/.../hex/schemas/GridSearchSchema

-----
Other changes:

SplitFrame takes args in constructor instead of assigned afterwards
Interaction execImpl takes no args
Frame.update takes no args
Frame.delete_and_lock() can take no arg to mean: no Job

compute2() becomes public instead of protected (can't remember which usage
needed it public; sadface).  This was done with IdeaJ refactoring, and is the
largest single textual change in this entire commit.

Frame toString is more robust on broken frames.

PCA & GLRM are no longer experiemental, only SVD is experimental
scripts/run.py no longer has win32 cutout

GA opt-out if minor version is 99999.

More checks in AAA_PrelockCloud to avoid locking a cloud when doing simple
inspection.  Flow still locks the cloud, because it asks for a list of all
ModelBuilders, and this ends up making instances of a hundred types in TypeMap.

Common test pattern change:
  OLD: job = new ModelBuilder();  model = job.trainModel().get();  job.remove();
  NEW: model = new ModelBuilder().trainModel().get();

  OLD: cf.execImpl(); cf.get(); frame = DKV.getGet(cf.dest())
  NEW: frame = cf.execImpl().get();

All GSON moved to JSONUtils

Scope can untrack keys

Turn off unused experimental signatures in generate_java_bindings.py

Many many idea warnings removed

Upgrade emacs JDEE wrappers
