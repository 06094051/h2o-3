In [1]: import h2o

In [2]: h2o.init()


No instance found at ip and port: localhost:54321. Trying to start local jar...


JVM stdout: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpof5ZIZ/h2o_hank_started_from_python.out
JVM stderr: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpk4uayp/h2o_hank_started_from_python.err
Using ice_root: /var/folders/wg/3qx1qchx1jsfjqqbmz3stj7c0000gn/T/tmpKy1Wmt


Java Version: java version "1.8.0_40"
Java(TM) SE Runtime Environment (build 1.8.0_40-b27)
Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)


Starting H2O JVM and connecting: ............... Connection sucessful!
--------------------------  --------------------------
H2O cluster uptime:         1 seconds 591 milliseconds
H2O cluster version:        3.2.0.5
H2O cluster name:           H2O_started_from_python
H2O cluster total nodes:    1
H2O cluster total memory:   3.56 GB
H2O cluster total cores:    4
H2O cluster allowed cores:  4
H2O cluster healthy:        True
H2O Connection ip:          127.0.0.1
H2O Connection port:        54321
--------------------------  --------------------------

In [3]: df = h2o.H2OFrame(((1, 2, 3),
   ...:                    ('a', 'b', 'c'),
   ...:                    (0.1, 0.2, 0.3)))

Parse Progress: [##################################################] 100%
Uploaded py9bccf8ce-c01e-40c8-bc73-b8e7e0b17c6a into cluster with 3 rows and 3 cols

In [4]: df
Out[4]: H2OFrame with 3 rows and 3 columns:
    C1   C2   C3
0  1.0  2.0  3.0
1  NaN  NaN  NaN
2  0.1  0.2  0.3

In [5]: df = h2o.H2OFrame([[1, 2, 3],
   ...:                    ['a', 'b', 'c'],
   ...:                    [0.1, 0.2, 0.3]])

Parse Progress: [##################################################] 100%
Uploaded py2c9ccb17-a86e-47d7-be1a-a7950b338870 into cluster with 3 rows and 3 cols

In [6]: df
Out[6]: H2OFrame with 3 rows and 3 columns:
    C1   C2   C3
0  1.0  2.0  3.0
1  NaN  NaN  NaN
2  0.1  0.2  0.3

In [7]: df = h2o.H2OFrame({'A': [1, 2, 3],
   ...:                    'B': ['a', 'b', 'c'],
   ...:                    'C': [0.1, 0.2, 0.3]})

Parse Progress: [##################################################] 100%
Uploaded py2714e8a2-67c7-45a3-9d47-247120c5d931 into cluster with 3 rows and 3 cols

In [8]: df
Out[8]: H2OFrame with 3 rows and 3 columns:
   A    C  B
0  1  0.1  a
1  2  0.2  b
2  3  0.3  c

In [9]: df2 = h2o.H2OFrame({'A': [1, 2, 3],
   ...:                     'B': ['a', 'a', 'b'],
   ...:                     'C': ['hello', 'all', 'world'],
   ...:                     'D': ['12MAR2015:11:00:00', '13MAR2015:12:00:00', '14MAR2015:13:00:00']},
   ...:                    column_types=['numeric', 'enum', 'string', 'time'])

Parse Progress: [##################################################] 100%
Uploaded py17ea1f6d-ae83-451d-ad33-89e770061601 into cluster with 3 rows and 4 cols

In [10]: df2
Out[10]: H2OFrame with 3 rows and 4 columns:
   A      C  B                   D
0  1  hello  a 2015-03-12 11:00:00
1  2    all  a 2015-03-13 12:00:00
2  3  world  b 2015-03-14 13:00:00

In [11]: df2.types
Out[11]: {u'A': u'numeric', u'B': u'string', u'C': u'enum', u'D': u'time'}

In [16]: import numpy as np

In [17]: df = h2o.H2OFrame(np.random.randn(100,4).tolist(), column_names=list('ABCD'))

Parse Progress: [##################################################] 100%
Uploaded py0a4d1d8d-7d04-438a-a97f-a9521f802366 into cluster with 100 rows and 4 cols

In [18]: df.head()
H2OFrame with 100 rows and 4 columns:
        A           B           C          D
---------  ----------  ----------  ---------
-0.613035  -0.425327   -1.92774    -2.1201
-1.26552   -0.241526   -0.0445104   1.90628
 0.763851   0.0391609  -0.500049    0.355561
-1.24842    0.912686   -0.61146     1.94607
 2.1058    -1.83995     0.453875   -1.69911
 1.7635     0.573736   -0.309663   -1.51131
-0.781973   0.051883   -0.403075    0.569406
 1.40085    1.91999     0.514212   -1.47146
-0.746025  -0.632182    1.27455    -1.35006
-1.12065    0.374212    0.232229   -0.602646

In [19]: df.tail(5)
H2OFrame with 100 rows and 4 columns:
        A           B          C          D
---------  ----------  ---------  ---------
 1.00098   -1.43183    -0.322068   0.374401
 1.16553   -1.23383    -1.71742    1.01035
-1.62351   -1.13907     2.1242    -0.275453
-0.479005  -0.0048988   0.224583   0.219037
-0.74103    1.13485     0.732951   1.70306

In [20]: df.columns
Out[20]: [u'A', u'B', u'C', u'D']

In [21]: df.describe()
Rows: 100 Cols: 4

Chunk compression summary:
chunk_type    chunk_name    count    count_percentage    size    size_percentage
------------  ------------  -------  ------------------  ------  -----------------
C8D           64-bit Reals  4        100                 3.4 KB  100

Frame distribution summary:
                 size    number_of_rows    number_of_chunks_per_column    number_of_chunks
---------------  ------  ----------------  -----------------------------  ------------------
127.0.0.1:54321  3.4 KB  100               1                              4
mean             3.4 KB  100               1                              4
min              3.4 KB  100               1                              4
max              3.4 KB  100               1                              4
stddev           0  B    0                 0                              0
total            3.4 KB  100               1                              4

Column-by-Column Summary:

               A                 B                C               D
-------------  ----------------  ---------------  --------------  ---------------
type           real              real             real            real
mins           -2.49822203553    -2.37446666635   -2.45977145855  -3.4824700746
maxs           2.59380923692     1.91998742969    3.13014386914   2.39057403117
mean           -0.0106208424692  -0.231598107744  0.114237537891  -0.162281909336
sigma          1.04354596785     0.905765044785   0.961335815956  1.02608775498
zero_count     0                 0                0               0
missing_count  0                 0                0               0

In [23]: df['A']
Out[23]: H2OFrame with 100 rows and 1 columns:
          A
0 -0.613035
1 -1.265520
2  0.763851
3 -1.248425
4  2.105805
5  1.763502
6 -0.781973
7  1.400853
8 -0.746025
9 -1.120648

In [24]: df[1]
Out[24]: H2OFrame with 100 rows and 1 columns:
          B
0 -0.425327
1 -0.241526
2  0.039161
3  0.912686
4 -1.839950
5  0.573736
6  0.051883
7  1.919987
8 -0.632182
9  0.374212

In [25]: df[['B','C']]
Out[25]: H2OFrame with 100 rows and 2 columns:
          B         C
0 -0.425327 -1.927737
1 -0.241526 -0.044510
2  0.039161 -0.500049
3  0.912686 -0.611460
4 -1.839950  0.453875
5  0.573736 -0.309663
6  0.051883 -0.403075
7  1.919987  0.514212
8 -0.632182  1.274552
9  0.374212  0.232229

In [26]: df[0:2]
Out[26]: H2OFrame with 100 rows and 2 columns:
          A         B
0 -0.613035 -0.425327
1 -1.265520 -0.241526
2  0.763851  0.039161
3 -1.248425  0.912686
4  2.105805 -1.839950
5  1.763502  0.573736
6 -0.781973  0.051883
7  1.400853  1.919987
8 -0.746025 -0.632182
9 -1.120648  0.374212

In [27]: df[2:7, :]
Out[27]: H2OFrame with 5 rows and 4 columns:
          A         B         C         D
0  0.763851  0.039161 -0.500049  0.355561
1 -1.248425  0.912686 -0.611460  1.946068
2  2.105805 -1.839950  0.453875 -1.699112
3  1.763502  0.573736 -0.309663 -1.511314
4 -0.781973  0.051883 -0.403075  0.569406

In [28]: df2[ df2["B"] == "a", :]
Out[28]: H2OFrame with 2 rows and 4 columns:
   A      C  B                   D
0  1  hello  a 2015-03-12 11:00:00
1  2    all  a 2015-03-13 12:00:00

In [46]: df3 = h2o.H2OFrame({'A': [1, 2, 3,None,''],
   ....:                     'B': ['a', 'a', 'b', 'NA', 'NA'],
   ....:                     'C': ['hello', 'all', 'world', None, None],
   ....:                     'D': ['12MAR2015:11:00:00',None,'13MAR2015:12:00:00',None,'14MAR2015:13:00:00']},
   ....:                    column_types=['numeric', 'enum', 'string', 'time'])

Parse Progress: [##################################################] 100%
Uploaded py9fdee149-dce2-4ace-91d8-e14e0d0c306a into cluster with 5 rows and 4 cols

In [47]: df3
Out[47]: H2OFrame with 5 rows and 4 columns:
    A      C    B             D
0   1  hello    a  1.426183e+12
1   2    all    a           NaN
2   3  world    b  1.426273e+12
3 NaN    NaN  NaN           NaN
4 NaN    NaN  NaN  1.426363e+12

In [49]: df3["A"].isna()
Out[49]: H2OFrame with 5 rows and 1 columns:
   C1
0   0
1   0
2   0
3   1
4   1

In [41]: df3[ df3["A"].isna(), "A"] = 5

In [52]: df3
Out[52]: H2OFrame with 5 rows and 4 columns:
   A      C    B             D
0  1  hello    a  1.426183e+12
1  2    all    a           NaN
2  3  world    b  1.426273e+12
3  5    NaN  NaN           NaN
4  5    NaN  NaN  1.426363e+12

In [53]: df3.isna()
Out[53]: H2OFrame with 5 rows and 4 columns:
   C1  C2  C3  C4
0   0   0   0   0
1   0   0   0   1
2   0   0   0   0
3   0   1   0   1
4   0   1   0   0

In [60]: df4 = h2o.H2OFrame({'A': [1, 2, 3,None,''],
   ....:                     'B': ['a', 'a', 'b', 'NA', 'NA'],
   ....:                     'C': ['hello', 'all', 'world', None, None],
   ....:                     'D': ['12MAR2015:11:00:00',None,'13MAR2015:12:00:00',None,'14MAR2015:13:00:00']},
   ....:                    column_types=['numeric', 'enum', 'string', 'time'])

Parse Progress: [##################################################] 100%
Uploaded py560240ff-1668-4445-8ae1-538a0b3daf53 into cluster with 5 rows and 4 cols

In [61]: df4.mean()
Out[61]: [2.0, nan, nan, 1426273200000.0]

In [62]: df4["A"].mean()
Out[62]: nan

In [64]: df4["A"].mean(na_rm=True)
Out[64]: 2.0
