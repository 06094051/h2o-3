description = "H2O Documentation"

apply plugin: 'java'

dependencies {
    compile project(":h2o-assembly")
}

def runner = new File("$rootDir/h2o-r/tests/run.py").canonicalPath

// REST API Documentation generator
// --------------------------------

def restGenPath = new File("$rootDir/py")

task runGenerateRESTAPIDocs(type: Exec) {
    workingDir restGenPath
    commandLine 'python', runner, '--wipeall', '--baseport', '48000', '--numclouds', '1', '--jvm.xmx', '4g', '--test', 'generate_rest_api_docs.py'
}

task cleanGenerateRESTAPIDocs(type: Delete) {
    delete "$restGenPath/results"
}

build.dependsOn runGenerateRESTAPIDocs
clean.dependsOn cleanGenerateRESTAPIDocs


// Latex Booklets
// --------------

def bookletPath = new File("$rootDir/h2o-docs/src/booklets/v2_2015/source")

task(createBuildInfoTex) << {
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
    File f = new File (bookletPath, "generated_buildinfo.tex");
    StringBuilder sb = new StringBuilder();
    sb.append('%\n')
    sb.append('% Generated by ./gradlew booklets\n')
    sb.append('%\n')
    sb.append('\\newcommand{\\waterVersion}{')
    sb.append(bv.getProjectVersion())
    sb.append('}\n')
    f.write(sb.toString());
}

def counterToBooklet(int counter) {
    String[] booklets = [
            "GLM_Vignette",
            "GBM_Vignette",
            "DeepLearning_Vignette",
            "SparklingWaterVignette",
            "R_Vignette"]
    return booklets[counter];
}

5.times {
    counter ->
        task "compile_${counter}_0"(type: Exec, dependsOn: createBuildInfoTex) {
            workingDir bookletPath
            commandLine 'pdflatex', '-halt-on-error', counterToBooklet(counter)
            standardOutput = new FileOutputStream("$bookletPath/gradle_" + counterToBooklet(counter) + "_" + counter + "_0.out")
        }
}

5.times {
    counter ->
        task "compile_${counter}_1"(type: Exec, dependsOn: "compile_${counter}_0") {
            workingDir bookletPath
            commandLine 'bibtex', counterToBooklet(counter)
            standardOutput = new FileOutputStream("$bookletPath/gradle_" + counterToBooklet(counter) + "_" + counter + "_0.out")
        }
}

5.times {
    counter ->
        task "compile_${counter}_2"(type: Exec, dependsOn: "compile_${counter}_1") {
            workingDir bookletPath
            commandLine 'pdflatex', '-halt-on-error', counterToBooklet(counter)
            standardOutput = new FileOutputStream("$bookletPath/gradle_" + counterToBooklet(counter) + "_" + counter + "_0.out")
        }
}

5.times {
    counter ->
        task "compile_${counter}_3"(type: Exec, dependsOn: "compile_${counter}_2") {
            workingDir bookletPath
            commandLine 'pdflatex', '-halt-on-error', counterToBooklet(counter)
            standardOutput = new FileOutputStream("$bookletPath/gradle_" + counterToBooklet(counter) + "_" + counter + "_0.out")
        }
}

// compile_X_Y
//
// X is the counter number
//   See counterToBooklet()
//
// Y is the phase
//   phase 0 pdflatex
//   phase 1 bibtex
//   phase 2 pdflatex
//   phase 3 pdflatex
//
task compileBooklets(dependsOn: ["compile_0_3", "compile_1_3", "compile_2_3", "compile_3_3", "compile_4_3"])

task cleanBooklets << {
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.out')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.pdf')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.blg')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.log')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.aux')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.toc')     }
    ant.delete() { fileset(dir: file(bookletPath), includes: '*.synctex') }
    ant.delete() { fileset(dir: file(bookletPath), includes: 'generated_buildinfo.tex') }
}

task booklets(dependsOn: compileBooklets)

clean.dependsOn cleanBooklets
