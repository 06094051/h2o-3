//
// H2O Algos Module
//
description = "H2O Algorithms"

dependencies {
  compile project(":h2o-core")
  testCompile "junit:junit:${junitVersion}"
  testCompile project(path: ":h2o-core", configuration: "testArchives")
  testRuntime("org.easyb:easyb-core:1.4") { transitive = true }
}

// The default 'test' behavior is broken in that it does not grok clusters.
// For H2O, all tests need to be run on a cluster, where each JVM is
// "free-running" - it's stdout/stderr are NOT hooked by another process.  If
// they are hooked (e.g., by the gradle driver process) then the stdout/err get
// buffered and when all CPUs are maxed out (happens over a large fraction of
// the test run) no output is visible.  If the JVMs then crash (again, common
// enough), we get NO output for the test run.  So instead we need to arrange a
// complete cluster of free-running JVMs and redirect all output (at the OS
// level) to files - then scrape the files later for test results.
test {
  dependsOn ":h2o-core:testJar"
  dependsOn cpLibs, jar, testJar, testMultiNode

  // Defeat task 'test' by running no tests.
  exclude '**'
}

task acceptanceTest(description: "Runs acceptance tests for this project ${project.name}", group: 'Verification') << {
    ant.taskdef(name: "easyb", classname:"org.easyb.ant.BehaviorRunnerTask", classpath: sourceSets.test.runtimeClasspath.asPath)
    def reports = "${project.buildDir}/reports"
    new File(reports).mkdirs()
    ant.easyb( classpath: sourceSets.test.runtimeClasspath.asPath, failureProperty:'easyb_failed' ) {
        report( location:"${reports}/algosAcceptance.html", format:"html" )
        behaviors( dir: "src/test/easyb" ) {
            include( name:"**/*.story" )
        }
    }
    ant.fail( if:'easyb_failed', message: 'Failures in easyb stories' )
}
