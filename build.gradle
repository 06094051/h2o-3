//
// The top-level h2o-dev project does not have any java pieces itself, but
// apply from the standard java.gradle so that 'gradle idea' generates IDE
// files with the right settings.
//
// The top-level h2o-dev.jar file that gets produced is empty and not usable
// for anything.  Use the jar file produced by the h2o-assembly subproject.
//
apply from: 'gradle/java.gradle'

// For multiproject setup we have to apply release plugin here (we share same release number cross all modules)
apply from: 'gradle/release.gradle'

// Print out time taken for each task so we find things that are slow.
apply from: 'gradle/timing.gradle'

// The build script settings to fetch plugins and put them on
// classpath
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2'
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
        classpath 'com.github.townsfolk:gradle-release:1.2'
        classpath 'de.undercouch:gradle-download-task:1.1'
        classpath 'joda-time:joda-time:2.2'
    }
}

//
// Common configuration
//
ext {
    //
    // All published projects - their artifacts are going to Maven central
    publishedProjects = [
      project(':h2o-core'),
      project(':h2o-algos'),
      project(':h2o-web'),
      project(':h2o-app'),
      project(':h2o-scala')
    ]

    javaProjects = [
      project(':h2o-core'),
      project(':h2o-algos'),
      project(':h2o-web'),
      project(':h2o-app'),
      project(':h2o-test-integ')
    ]

    scalaProjects = [
      project(':h2o-scala')
    ]

    rProjects = [
      project(':h2o-r')
    ]

    pythonProjects = [
    ]

    // Supported Hadoop versions used at compile time
    // and assembled into resulting jar
    hadoopVersions = [
      /* CDH3     */ '0.20.2-cdh3u6',
      /* CDH4.3   */ '2.0.0-cdh4.3.0',
      /* CDH4.3   */ '2.0.0-cdh4.7.0',
      /* CDH5.1   */ '2.3.0-cdh5.1.3',
      /* CDH5.2   */ '2.5.0-cdh5.2.0',
      /* HDP2.0.6 */ '2.2.0.2.0.6.0-102',
      /* HDP2.1.3 */ '2.4.0.2.1.3.0-563',
      /* HDP2.1.5 */ '2.4.0.2.1.5.0-695'
    ]

    //
    // Versions of libraries shared cross all projects
    //
    junitVersion  = '4.11'
    hadoopVersion = '2.5.0-cdh5.2.0'
    jets3tVersion = '0.7.1'
    awsJavaSdkVersion = '1.8.3'
}

//
// For all projects (this and all subprojects) specify common properties and tasks
//
allprojects {
    group = 'ai.h2o'

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply from: "$rootDir/gradle/artifacts.gradle"
}

// 
// Common configuration for all subprojects
//
subprojects {
    // All project inherits the same versioning number
    version = rootProject.version

    repositories {
        mavenCentral()
        // Cloudera dependencies
        maven {
          url "https://repository.cloudera.com/artifactory/cloudera-repos/"
        }
        // Hortonworks dependencies
        maven {
          url "http://repo.hortonworks.com/content/repositories/releases/"
        }
        // mavenLocal()
    }
    // Publish artifacts - we should filter subproject in future but now apply publisher plugin
    // to all projects
    if (project in publishedProjects) {
      apply from: "$rootDir/gradle/publish.gradle"
    }

    apply from: "$rootDir/gradle/makeSupport.gradle"

    //
    // Early configuration of projects simplifies build resolution
    //

    // Configure Java projects
    if (project in javaProjects) {
       apply from: "$rootDir/gradle/java.gradle"
       apply from: "$rootDir/gradle/cp.gradle"
    }

    // Configure Scala projects
    if (project in scalaProjects) {
        apply from: "$rootDir/gradle/scala.gradle"
        apply from: "$rootDir/gradle/cp.gradle"
    }

    if (project in rProjects) {
        apply from: "$rootDir/gradle/r.gradle"
    }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

//
// Setup global properties shared by all projects
//
ext {
    // Collect all artifacts produced by all projects in this project - all "archives" artifacts
    allArchives = subprojects.findAll().inject(
            files(), { acc, pj -> 
          if (pj in publishedProjects)
            acc + pj.configurations.archives.allArtifacts.getFiles()
          else
            acc
    })
    // Collect all test artifacts
    allTestArchives = files() // filed lazily below

}

// After evaluation of all projects collect all artifacts produced by testArchives configuration
subprojects {
    afterEvaluate( { pj ->
        def testCnf = pj.configurations.findAll().find({ it.getName().equals("testArchives") })
        if (testCnf != null) allTestArchives = allTestArchives + testCnf.allArtifacts.getFiles()
    } )
}

// Include support for S3 syncing
apply from: "gradle/s3sync.gradle"

// This task is used by the Jenkins on test.h2o.ai.
//
// It creates a directory called 'target', copies everything to be released 
// there, and everything in that directory gets uploaded to S3.
//
// See ~jenkins/bin/buildh2odev.sh.
task buildH2oDevDist(type: Exec) {
    group='Dist'
    commandLine './gradlew --no-daemon :h2o-test-integ:cleanGenerateRESTAPIDocs :h2o-test-integ:runGenerateRESTAPIDocs'
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
    def projectVersion = bv.getProjectVersion()
    def lastCommitHash = bv.getLastCommitHash()
    environment['PROJECT_VERSION'] = projectVersion
    environment['LAST_COMMIT_HASH'] = lastCommitHash
    commandLine './make-dist.sh'
}

buildH2oDevDist.dependsOn ':h2o-test-integ:runGenerateRESTAPIDocs'

//
// Import project development profiles
//
apply from: "gradle/profiles.gradle"
